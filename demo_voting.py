#!/usr/bin/env python3
"""
Demo script cho t√≠nh nƒÉng Voting System (Upvote/Downvote)
"""

from services.article_service import ArticleService
from services.voting_service import VotingService
from models.vote import VoteType
from utils.redis_client import redis_client
import time

def print_separator(title: str):
    """In d√≤ng ph√¢n c√°ch ƒë·∫πp"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def print_article_with_votes(article, index: int = None):
    """In th√¥ng tin b√†i vi·∫øt v·ªõi votes"""
    prefix = f"{index}. " if index is not None else "  "
    groups_str = f"üè∑Ô∏è  Groups: {', '.join(article.groups)}" if article.groups else "üè∑Ô∏è  Groups: None"
    
    print(f"{prefix}üì∞ {article.title}")
    print(f"    üîó Link: {article.link}")
    print(f"    üë§ Poster: {article.poster}")
    print(f"    ‚è∞ Time: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(article.time_created))}")
    print(f"    üëç Upvotes: {article.upvotes}")
    print(f"    üëé Downvotes: {article.downvotes}")
    print(f"    üìä Total: {article.votes}")
    print(f"    ‚≠ê Score: {article.get_score():.2f}")
    print(f"    {groups_str}")
    print(f"    üÜî ID: {article.id}")
    print()

def print_vote_stats(article_id: str, service: ArticleService):
    """In th·ªëng k√™ votes c·ªßa article"""
    stats = service.get_article_vote_stats(article_id)
    voted_users = service.get_article_voted_users(article_id)
    
    print(f"üìä VOTE STATS:")
    print(f"   üëç Upvotes: {stats['upvotes']}")
    print(f"   üëé Downvotes: {stats['downvotes']}")
    print(f"   üìä Total: {stats['total']}")
    print(f"   üë• Users upvoted: {', '.join(voted_users['upvoted']) if voted_users['upvoted'] else 'None'}")
    print(f"   üë• Users downvoted: {', '.join(voted_users['downvoted']) if voted_users['downvoted'] else 'None'}")
    print()

def demo_setup_articles():
    """Demo t·∫°o articles ƒë·ªÉ voting"""
    print_separator("üöÄ DEMO SETUP - CREATING ARTICLES")
    
    service = ArticleService()
    
    # T·∫°o v√†i b√†i vi·∫øt ƒë·ªÉ demo voting
    sample_articles = [
        {
            "title": "Redis vs MongoDB: Performance Comparison",
            "link": "https://redis-vs-mongodb.com",
            "poster": "db_expert",
            "groups": ["database", "performance"]
        },
        {
            "title": "Python Async/Await Best Practices",
            "link": "https://python-async-guide.dev",
            "poster": "python_guru",
            "groups": ["programming", "python"]
        },
        {
            "title": "Building Scalable Microservices",
            "link": "https://microservices-guide.com",
            "poster": "architect",
            "groups": ["architecture", "microservices"]
        }
    ]
    
    article_ids = []
    for i, article_data in enumerate(sample_articles, 1):
        print(f"T·∫°o b√†i vi·∫øt {i}/{len(sample_articles)}...")
        article_id = service.post_article(
            title=article_data["title"],
            link=article_data["link"],
            poster=article_data["poster"],
            groups=article_data["groups"]
        )
        article_ids.append(article_id)
        time.sleep(0.1)
    
    print(f"\n‚úÖ ƒê√£ t·∫°o {len(article_ids)} b√†i vi·∫øt ƒë·ªÉ demo voting!")
    return article_ids

def demo_basic_voting():
    """Demo upvote/downvote c∆° b·∫£n"""
    print_separator("üëçüëé DEMO BASIC VOTING")
    
    service = ArticleService()
    
    # L·∫•y b√†i vi·∫øt g·∫ßn ƒë√¢y nh·∫•t
    recent_articles = service.get_recent_articles(limit=1)
    if not recent_articles:
        print("‚ùå Kh√¥ng c√≥ b√†i vi·∫øt n√†o ƒë·ªÉ vote!")
        return
    
    article = recent_articles[0]
    print(f"üéØ B√†i vi·∫øt ƒë·ªÉ demo: {article.title}")
    print(f"   Initial state:")
    print_article_with_votes(article)
    
    print(f"üìù DEMO VOTING ACTIONS:")
    
    # User 1 upvote
    print("   üë§ user1 upvote...")
    success = service.upvote_article("user1", article.id)
    if success:
        updated_article = service.get_article(article.id)
        print(f"      ‚úÖ Success! New upvotes: {updated_article.upvotes}")
    
    # User 2 upvote
    print("   üë§ user2 upvote...")
    service.upvote_article("user2", article.id)
    
    # User 3 downvote
    print("   üë§ user3 downvote...")
    service.downvote_article("user3", article.id)
    
    # User 4 upvote
    print("   üë§ user4 upvote...")
    service.upvote_article("user4", article.id)
    
    # User 5 downvote
    print("   üë§ user5 downvote...")
    service.downvote_article("user5", article.id)
    
    # Xem k·∫øt qu·∫£
    print(f"\nüéä AFTER VOTING:")
    final_article = service.get_article(article.id)
    print_article_with_votes(final_article)
    
    print_vote_stats(article.id, service)

def demo_vote_changes():
    """Demo thay ƒë·ªïi vote (upvote -> downvote)"""
    print_separator("üîÑ DEMO VOTE CHANGES")
    
    service = ArticleService()
    
    # L·∫•y b√†i vi·∫øt
    recent_articles = service.get_recent_articles(limit=1)
    if not recent_articles:
        return
    
    article = recent_articles[0]
    print(f"üéØ B√†i vi·∫øt: {article.title}")
    
    # User upvote tr∆∞·ªõc
    print("   üë§ user_change upvote...")
    service.upvote_article("user_change", article.id)
    
    # Xem vote c·ªßa user
    user_vote = service.get_user_vote_for_article("user_change", article.id)
    print(f"      Current vote: {user_vote.vote_type if user_vote else 'None'}")
    
    # User change th√†nh downvote
    print("   üë§ user_change change to downvote...")
    service.downvote_article("user_change", article.id)
    
    # Xem vote m·ªõi
    user_vote = service.get_user_vote_for_article("user_change", article.id)
    print(f"      New vote: {user_vote.vote_type if user_vote else 'None'}")
    
    # User remove vote
    print("   üë§ user_change remove vote...")
    service.remove_vote_from_article("user_change", article.id)
    
    user_vote = service.get_user_vote_for_article("user_change", article.id)
    print(f"      Final vote: {user_vote.vote_type if user_vote else 'None'}")

def demo_prevent_double_voting():
    """Demo ngƒÉn ch·∫∑n double voting"""
    print_separator("üö´ DEMO PREVENT DOUBLE VOTING")
    
    service = ArticleService()
    
    # L·∫•y b√†i vi·∫øt
    recent_articles = service.get_recent_articles(limit=1)
    if not recent_articles:
        return
    
    article = recent_articles[0]
    print(f"üéØ B√†i vi·∫øt: {article.title}")
    
    # User upvote l·∫ßn ƒë·∫ßu
    print("   üë§ user_double upvote l·∫ßn 1...")
    success1 = service.upvote_article("user_double", article.id)
    print(f"      Result: {'‚úÖ Success' if success1 else '‚ùå Failed'}")
    
    # User upvote l·∫ßn 2 (s·∫Ω b·ªã ch·∫∑n)
    print("   üë§ user_double upvote l·∫ßn 2...")
    success2 = service.upvote_article("user_double", article.id)
    print(f"      Result: {'‚úÖ Success' if success2 else '‚ùå Failed (prevented double voting)'}")
    
    # Xem vote hi·ªán t·∫°i
    user_vote = service.get_user_vote_for_article("user_double", article.id)
    print(f"      Current vote: {user_vote.vote_type if user_vote else 'None'}")

def demo_vote_history():
    """Demo l·ªãch s·ª≠ vote c·ªßa user"""
    print_separator("üìö DEMO VOTE HISTORY")
    
    service = ArticleService()
    
    # L·∫•y nhi·ªÅu b√†i vi·∫øt
    recent_articles = service.get_recent_articles(limit=3)
    if len(recent_articles) < 2:
        print("‚ùå C·∫ßn √≠t nh·∫•t 2 b√†i vi·∫øt ƒë·ªÉ demo vote history!")
        return
    
    # User vote cho nhi·ªÅu b√†i vi·∫øt
    print("   üë§ user_history voting on multiple articles...")
    service.upvote_article("user_history", recent_articles[0].id)
    service.downvote_article("user_history", recent_articles[1].id)
    if len(recent_articles) > 2:
        service.upvote_article("user_history", recent_articles[2].id)
    
    # Xem l·ªãch s·ª≠ vote
    vote_history = service.get_user_vote_history("user_history")
    print(f"\nüìñ Vote history c·ªßa user_history:")
    for vote in vote_history:
        print(f"   - Article {vote.article_id}: {vote.vote_type.value} at {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(vote.timestamp))}")

def demo_article_ranking_by_votes():
    """Demo ranking articles theo votes"""
    print_separator("üèÜ DEMO ARTICLE RANKING BY VOTES")
    
    service = ArticleService()
    
    # L·∫•y t·∫•t c·∫£ b√†i vi·∫øt v√† s·∫Øp x·∫øp theo score
    top_articles = service.get_top_articles(limit=10)
    
    print("üèÜ TOP ARTICLES BY SCORE:")
    for i, article in enumerate(top_articles, 1):
        print_article_with_votes(article, i)

def demo_group_voting():
    """Demo voting trong groups"""
    print_separator("üè∑Ô∏è  DEMO GROUP VOTING")
    
    service = ArticleService()
    
    # L·∫•y articles trong group programming
    programming_articles = service.get_top_articles_in_group("programming", limit=3)
    
    if programming_articles:
        print("üè∑Ô∏è  TOP PROGRAMMING ARTICLES:")
        for i, article in enumerate(programming_articles, 1):
            print_article_with_votes(article, i)
    else:
        print("‚ùå Kh√¥ng c√≥ b√†i vi·∫øt n√†o trong group programming!")

def main():
    """H√†m main ch·∫°y demo"""
    print_separator("üéâ REDIS VOTING SYSTEM - VOTING DEMO")
    
    # Ki·ªÉm tra k·∫øt n·ªëi Redis
    if not redis_client.ping():
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Redis! Vui l√≤ng ki·ªÉm tra:")
        print("   - Redis server ƒë√£ ch·∫°y ch∆∞a?")
        print("   - C·∫•u h√¨nh connection trong config.py")
        return
    
    print("‚úÖ K·∫øt n·ªëi Redis th√†nh c√¥ng!")
    
    try:
        # Ch·∫°y c√°c demo
        demo_setup_articles()
        demo_basic_voting()
        demo_vote_changes()
        demo_prevent_double_voting()
        demo_vote_history()
        demo_article_ranking_by_votes()
        demo_group_voting()
        
        print_separator("üéä DEMO VOTING HO√ÄN TH√ÄNH")
        print("T·∫•t c·∫£ t√≠nh nƒÉng voting system ƒë√£ ho·∫°t ƒë·ªông!")
        
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh demo: {str(e)}")
        import traceback
        traceback.print_exc()
    
    finally:
        # ƒê√≥ng k·∫øt n·ªëi Redis
        redis_client.close()

if __name__ == "__main__":
    main() 