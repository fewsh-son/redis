#!/usr/bin/env python3
"""
Demo script cho t√≠nh nƒÉng Groups
"""

from services.article_service import ArticleService
from services.group_service import GroupService
from utils.redis_client import redis_client
import time

def print_separator(title: str):
    """In d√≤ng ph√¢n c√°ch ƒë·∫πp"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def print_article_with_groups(article, index: int = None):
    """In th√¥ng tin b√†i vi·∫øt v·ªõi groups"""
    prefix = f"{index}. " if index is not None else "  "
    groups_str = f"üè∑Ô∏è  Groups: {', '.join(article.groups)}" if article.groups else "üè∑Ô∏è  Groups: None"
    
    print(f"{prefix}üì∞ {article.title}")
    print(f"    üîó Link: {article.link}")
    print(f"    üë§ Poster: {article.poster}")
    print(f"    ‚è∞ Time: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(article.time_created))}")
    print(f"    üëç Votes: {article.votes}")
    print(f"    ‚≠ê Score: {article.get_score():.2f}")
    print(f"    {groups_str}")
    print(f"    üÜî ID: {article.id}")
    print()

def demo_posting_articles_with_groups():
    """Demo ƒëƒÉng b√†i vi·∫øt v·ªõi groups"""
    print_separator("üöÄ DEMO POSTING ARTICLES WITH GROUPS")
    
    service = ArticleService()
    
    # Danh s√°ch b√†i vi·∫øt v·ªõi groups
    articles_with_groups = [
        {
            "title": "Python Best Practices 2024",
            "link": "https://python-best-practices.com",
            "poster": "python_expert",
            "groups": ["programming", "python"]
        },
        {
            "title": "Redis Performance Optimization",
            "link": "https://redis-performance.dev",
            "poster": "db_admin",
            "groups": ["programming", "database", "redis"]
        },
        {
            "title": "JavaScript ES2024 Features",
            "link": "https://js-es2024.com",
            "poster": "js_developer",
            "groups": ["programming", "javascript"]
        },
        {
            "title": "Docker Container Security",
            "link": "https://docker-security.guide",
            "poster": "devops_engineer",
            "groups": ["devops", "security"]
        },
        {
            "title": "Machine Learning with Python",
            "link": "https://ml-python.ai",
            "poster": "data_scientist",
            "groups": ["programming", "python", "ai"]
        },
        {
            "title": "Cloud Architecture Patterns",
            "link": "https://cloud-patterns.com",
            "poster": "cloud_architect",
            "groups": ["cloud", "architecture"]
        }
    ]
    
    posted_ids = []
    
    for i, article_data in enumerate(articles_with_groups, 1):
        print(f"ƒêƒÉng b√†i vi·∫øt {i}/{len(articles_with_groups)}...")
        article_id = service.post_article(
            title=article_data["title"],
            link=article_data["link"],
            poster=article_data["poster"],
            groups=article_data["groups"]
        )
        posted_ids.append(article_id)
        
        # Delay nh·ªè ƒë·ªÉ c√≥ s·ª± kh√°c bi·ªát v·ªÅ th·ªùi gian
        time.sleep(0.1)
    
    print(f"\n‚úÖ ƒê√£ ƒëƒÉng th√†nh c√¥ng {len(posted_ids)} b√†i vi·∫øt v·ªõi groups!")
    return posted_ids

def demo_group_operations():
    """Demo c√°c operations v·ªõi groups"""
    print_separator("üè∑Ô∏è  DEMO GROUP OPERATIONS")
    
    service = ArticleService()
    group_service = GroupService()
    
    # L·∫•y t·∫•t c·∫£ groups
    all_groups = group_service.get_all_groups()
    print(f"üìã T·∫•t c·∫£ groups: {', '.join(all_groups)}")
    
    # Th·ªëng k√™ t·ª´ng group
    print(f"\nüìä TH·ªêNG K√ä GROUPS:")
    for group_name in all_groups:
        stats = group_service.get_group_stats(group_name)
        print(f"  üè∑Ô∏è  {group_name}:")
        print(f"     - S·ªë b√†i vi·∫øt: {stats['article_count']}")
        print(f"     - Score cao nh·∫•t: {stats['highest_score']:.2f}")
        print(f"     - Score th·∫•p nh·∫•t: {stats['lowest_score']:.2f}")
        print()

def demo_fetching_by_groups():
    """Demo l·∫•y b√†i vi·∫øt theo groups"""
    print_separator("üîç DEMO FETCHING BY GROUPS")
    
    service = ArticleService()
    group_service = GroupService()
    
    # L·∫•y b√†i vi·∫øt theo t·ª´ng group
    all_groups = group_service.get_all_groups()
    
    for group_name in all_groups[:3]:  # Ch·ªâ demo 3 groups ƒë·∫ßu ti√™n
        print(f"\nüè∑Ô∏è  ARTICLES IN GROUP: {group_name.upper()}")
        
        # L·∫•y top 3 b√†i vi·∫øt trong group
        top_articles = service.get_top_articles_in_group(group_name, limit=3)
        
        if top_articles:
            print(f"   üìà Top {len(top_articles)} b√†i vi·∫øt ƒëi·ªÉm cao nh·∫•t:")
            for i, article in enumerate(top_articles, 1):
                print_article_with_groups(article, i)
        else:
            print("   ‚ùå Kh√¥ng c√≥ b√†i vi·∫øt n√†o trong group n√†y")

def demo_group_management():
    """Demo qu·∫£n l√Ω groups"""
    print_separator("‚öôÔ∏è  DEMO GROUP MANAGEMENT")
    
    service = ArticleService()
    group_service = GroupService()
    
    # L·∫•y m·ªôt b√†i vi·∫øt ƒë·ªÉ test
    recent_articles = service.get_recent_articles(limit=1)
    
    if recent_articles:
        article = recent_articles[0]
        print(f"üéØ B√†i vi·∫øt test: {article.title}")
        print(f"   Groups hi·ªán t·∫°i: {', '.join(article.groups) if article.groups else 'None'}")
        
        # Th√™m v√†o group m·ªõi
        new_group = "testing"
        print(f"\n‚ûï Th√™m v√†o group '{new_group}'...")
        success = service.add_article_to_group(article.id, new_group)
        
        if success:
            # L·∫•y l·∫°i article ƒë·ªÉ xem groups m·ªõi
            updated_article = service.get_article(article.id)
            print(f"   Groups sau khi th√™m: {', '.join(updated_article.groups)}")
            
            # X√≥a kh·ªèi group
            print(f"\n‚ûñ X√≥a kh·ªèi group '{new_group}'...")
            service.remove_article_from_group(article.id, new_group)
            
            # L·∫•y l·∫°i article
            final_article = service.get_article(article.id)
            print(f"   Groups sau khi x√≥a: {', '.join(final_article.groups) if final_article.groups else 'None'}")

def demo_cross_group_comparison():
    """Demo so s√°nh articles across groups"""
    print_separator("üîÑ DEMO CROSS-GROUP COMPARISON")
    
    service = ArticleService()
    
    # So s√°nh top articles gi·ªØa 2 groups
    groups_to_compare = ["programming", "python"]
    
    for group_name in groups_to_compare:
        print(f"\nüèÜ TOP 2 ARTICLES IN {group_name.upper()}:")
        top_articles = service.get_top_articles_in_group(group_name, limit=2)
        
        if top_articles:
            for i, article in enumerate(top_articles, 1):
                print_article_with_groups(article, i)
        else:
            print("   ‚ùå Kh√¥ng c√≥ b√†i vi·∫øt n√†o")

def main():
    """H√†m main ch·∫°y demo"""
    print_separator("üéâ REDIS VOTING SYSTEM - GROUPS DEMO")
    
    # Ki·ªÉm tra k·∫øt n·ªëi Redis
    if not redis_client.ping():
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Redis! Vui l√≤ng ki·ªÉm tra:")
        print("   - Redis server ƒë√£ ch·∫°y ch∆∞a?")
        print("   - C·∫•u h√¨nh connection trong config.py")
        return
    
    print("‚úÖ K·∫øt n·ªëi Redis th√†nh c√¥ng!")
    
    try:
        # Ch·∫°y c√°c demo
        demo_posting_articles_with_groups()
        demo_group_operations()
        demo_fetching_by_groups()
        demo_group_management()
        demo_cross_group_comparison()
        
        print_separator("üéä DEMO GROUPS HO√ÄN TH√ÄNH")
        print("T·∫•t c·∫£ t√≠nh nƒÉng grouping articles ƒë√£ ho·∫°t ƒë·ªông!")
        
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh demo: {str(e)}")
        raise
    
    finally:
        # ƒê√≥ng k·∫øt n·ªëi Redis
        redis_client.close()

if __name__ == "__main__":
    main() 